-------------DATABASE STRUCTURE-------------
+-------------------+         +-------------------------+         +----------------------+
|     Images        |         |    Annotations          |         |  Audio_Descriptions  |
+-------------------+         +-------------------------+         +----------------------+
| image_id (primary)◄─────┐   | annotation_id (primary) |         | audio_id (PK)        |
| file_name         |     |───┼►image_id (FK)◄──────────┼─────────┼►image_id (FK)        |
| file_path         |         | file_name               |         | file_name            |
| upload_date       |         | file_path               |         | file_path            |
+-------------------+         | annotation_text         |         | transcription        |
                              | annotation_date         |         | recording_date       |
                              +-------------------------+         +----------------------+

transcriptions, audio, and images are all stored as files, with the database containing paths to them
additionally the audio table contains its transcription inside the table
the generated annotations are stored as text files and are the complete raw text (input included) generated by the LLM

-------------Commands used to generate table-------------

CREATE TABLE images(
image_id INTEGER PRIMARY KEY AUTOINCREMENT,
file_name VARCHAR(255) NOT NULL,
path TEXT NOT NULL,
upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);

CREATE TABLE annotations(
annotation_id INTEGER PRIMARY KEY AUTOINCREMENT,
image_id INTEGER NOT NULL,
file_name VARCHAR(255) NOT NULL,
path TEXT NOT NULL,
upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
FOREIGN KEY (image_id) REFERENCES images(image_id) ON DELETE CASCADE
);

CREATE TABLE audio(
audio_id INTEGER PRIMARY KEY AUTOINCREMENT,
image_id INTEGER NOT NULL,
file_name VARCHAR(255) NOT NULL,
path TEXT NOT NULL,
upload_date TIMESTAMP DEFAUL CURRENT_TIMESTAMP,
transcription TEXT,
audio_format VARCHAR(50),
FOREIGN KEY (image_id) REFERENCES images(image_id) ON DELETE CASCADE
);

------------------"RESET" SCRIPT (FOR DEV PURPOSES ONLY)------------------

import sqlite3

# Connect to SQLite database (or create it if it doesn't exist)
conn = sqlite3.connect('example.db')
cursor = conn.cursor()

cursor.execute('DROP TABLE images;')
cursor.execute('DROP TABLE annotations;')
cursor.execute('DROP TABLE audio;')

# Create the tables
cursor.execute('''
CREATE TABLE images(
    image_id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_name VARCHAR(255) NOT NULL,
    path TEXT NOT NULL,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
''')

cursor.execute('''
CREATE TABLE annotations(
    annotation_id INTEGER PRIMARY KEY AUTOINCREMENT,
    image_id INTEGER NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    path TEXT NOT NULL,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (image_id) REFERENCES images(image_id) ON DELETE CASCADE
);
''')

cursor.execute('''
CREATE TABLE audio(
    audio_id INTEGER PRIMARY KEY AUTOINCREMENT,
    image_id INTEGER NOT NULL,
    file_name VARCHAR(255) NOT NULL,
    path TEXT NOT NULL,
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    transcription TEXT,
    audio_format VARCHAR(50),
    FOREIGN KEY (image_id) REFERENCES images(image_id) ON DELETE CASCADE
);
''')

# Insert first entry into the 'images' table
cursor.execute('''
INSERT INTO images (file_name, path) 
VALUES (?, ?);
''', ('example_image.jpg', '/path/to/example_image.jpg'))

# Get the image_id of the inserted image
image_id = cursor.lastrowid

# Insert first entry into the 'annotations' table
cursor.execute('''
INSERT INTO annotations (image_id, file_name, path) 
VALUES (?, ?, ?);
''', (image_id, 'example_annotation.json', '/path/to/example_annotation.json'))

# Insert first entry into the 'audio' table
cursor.execute('''
INSERT INTO audio (image_id, file_name, path, transcription, audio_format) 
VALUES (?, ?, ?, ?, ?);
''', (image_id, 'example_audio.mp3', '/path/to/example_audio.mp3', 'Sample transcription text', 'mp3'))

# Commit the changes and close the connection
conn.commit()

# Close the connection
conn.close()

print("Tables created and first entries inserted successfully.")

